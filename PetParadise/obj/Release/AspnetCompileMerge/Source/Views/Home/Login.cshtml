@model PetParadise.Models.account_credential

<h2 class="text-center fw-bold stext-darker" >Login</h2>

@using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @class="d-flex flex-column justify-content-evenly gap-2"}))
{
    <div class="w-100">
        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", title = "username", placeholder = "Username" })
    </div>
    
    <div class="w-100">
        @Html.PasswordFor(m => m.Password, new { @class = "form-control", title = "password", placeholder = "Password" })
    </div>
    <div id="validationNotes" class="w-100">
        <ul id="notes-container"></ul>
    </div>
    <button class="btn btn-outline-dark sbg-dark fw-bold stext-lighter" id="loginBtn" type="submit" value="Login">Login</button>
}
<span>or</span>
@Html.ActionLink("Signup", "Signup", null, new { @class = "btn btn-outline-light sbg-base stext-darker fw-bold" })

<script>
    const validator = new Validator("#notes-container");
    $('form').submit((e)=>{
        e.preventDefault();
        validator.removeErrors();
        $('#loader').show(300)

        const username = $('#Username').val();
        const password = $('#Password').val();
        
        if (!username || !password) {
            validator.addError(new InvalidObject("All", "Please fill out all required fields."));
            validator.updateParent();
            return $('#loader').hide();
        }

        const data = {
            username,
            password
        };

        const url = '/auth/login';

        

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(res=>res.json())
        .then(data=> {
            if (data.error) {
                const error = data.error.message;
                console.log(error);
                validator.addError(new InvalidObject("username/password", error));
                validator.updateParent();
                return;
            }

            const session = data.session;
            const userId = data.userId;
            const accountTypeId = data.accountTypeId;
            const hasProfile = data.HasProfile;

            localStorage.setItem("accountType", accountTypeId);
            setSessionToken(session);

            console.log(data)
            if (hasProfile && accountTypeId == 1) {
                window.location.replace("/owner/"+userId);
            }
            else if (hasProfile && accountTypeId == 2) {
                window.location.replace("/clinic/"+userId);
            }
            else {
                window.location.replace("/Account/CreateProfile?accountType=" + accountTypeId);
            }
        })
        .catch(e=> {
            console.log(e);
        })
        .finally(_=> {
            $('#loader').hide();
        })
    })
</script>